// This file contains git commands

// how to set git configurations
--> git config --global user.name "name"
--> git config --global user.email "email"
--> git config --global core.editor "atom -wl1"
--> git config --global color.ui true

// how to add auto completion script
--> curl -OL https://github.com/git/git/raw/master/contrib/completion/git-completion.bash

// rename and hide the auto completion file
--> mv ~/git-completion.bash ~/.git-completion.bash

// to make the auto completion file work add the following script into .bash_profile
--> if [ -f ~/.git-completion.bash ]; then
  source ~/.git-completion.bash
  fi

  // git help command
  --> git help "command name"

  // how to initialize or start tracking a repository
--> git init

// how to add all files from working directory to staging index
--> git add .

// how to commit from staging index to repository
--> git commit -m "good message"

// adding and committing using single command
--> git commit -am "message"

// viewing the commit log
--> git log

// to show the last 5 commits
--> git log -n 5
// using since and until and author name etc with log command
--> git log --since=date
--> git log --until=date
--> git log --author=author name

// viewing the status
--> git status

// git is a three tree architecture
   Repository ---- staging index ---- working directory

// how git track the changes
--> using SHA-1 or checksum Algorithm
--> SHA-1 is a 40 hexadecimal string (0-9 a-f)

// HEAD in git
--> HEAD always point to the last commit in the repository
--> git log HEAD // will display the last SHA-1

// div deep in HEAD
--> cat HEAD [result refs/heads/master]
--> cd refs
--> cd heads
--> cat master [will be always showing the last commit HEAD]

// viewing changes with diff comparing versions
--> git diff
--> git diff filename.txt
--> git diff color-words filename
--> git diff -w

// viewing changes that are already staged
--> git diff --staged

// deleting files
--> git rm file-name.extension
--> git commit -m "deletion message"

// moving and renaming files
--> git mv original-file-name new-file-name

// pushing local repository into github
--> git remote add <alias> <url>
--> git remote add origin https://github.com/Avenger4568/git-practice.git
--> git remote
--> git remote -v
--> git branch
--> git branch -r // will show the remote branches
--> git branch -a // will show both local and remote

// can also see where git stores these info
--> cat .git/config

// removing the remote repository
--> git remote rm origin

// to push changes to remote repository or creating a remote branch
--> git push -u origin master

// how to undo changes in the working directory
--> git checkout -- file-name // -- means stay in the same branch

// un-staging files that are staged
--> git reset HEAD filename

// amending the last commit adding the changes to the last commit.
--> git commit --amend -m "message"

// retrieving older version of file
--> git checkout SHA-1 filename // SHA-1 must be the first 8 or 10 characters of the commit you want to retrieve.

// reverting a commit
--> git revert SHA-1

// dangerous and power full reset command to reset multiple commits
// the safe way --soft only change the pointer
// mixed way --mixed change the staging index to match repository
// does not change working repository
// hard way --hard changing staging and working directory both to match repository
--> git reset --soft SHA-1
--> git reset --mixed SHA-1
--> git reset --hard SHA-1

// removing untracked files
--> git clean -n // this will move files from staging index
// to working directory to be ready for removal
--> git clean -f // this will remove all the working directory files.
